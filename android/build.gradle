apply plugin: "com.android.application"
apply plugin: "kotlin-android"

android {

    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "com.medusa.plusminus2"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
        jniLibs.srcDirs = ['libs']
    }

}

configurations { natives }

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"

    implementation "io.github.libktx:ktx-actors:$ktxVersion"
    implementation "io.github.libktx:ktx-log:$ktxVersion"
    implementation "io.github.libktx:ktx-math:$ktxVersion"
    implementation "io.github.libktx:ktx-assets:$ktxVersion"
    implementation "io.github.libktx:ktx-async:$ktxVersion"
//    implementation "io.github.libktx:ktx-scene2d:$ktxVersion"

    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

}




task copyAndroidNatives() {

    configurations.natives.files.each { jar ->
        def outputDir = null
        def name = jar.name
        if(name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            file(outputDir).mkdirs()
            copy { from zipTree(jar) into outputDir include "*.so"}
        }
    }
}
kotlin {
    experimental {
        coroutines "enable"
    }
}

//task run(type: Exec) {
//    def path
//    def localProperties = project.file("../local.properties")
//    if (localProperties.exists()) {
//        Properties properties = new Properties()
//        localProperties.withInputStream { instr ->
//            properties.load(instr)
//        }
//        def sdkDir = properties.getProperty('sdk.dir')
//        if (sdkDir) {
//            path = sdkDir
//        } else {
//            path = "$System.env.ANDROID_HOME"
//        }
//    } else {
//        path = "$System.env.ANDROID_HOME"
//    }
//
//    def adb = path + "/platform-tools/adb"
//    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.medusa.plusminus2/com.medusa.plusminus2.LauncherActivity'
//}

//idea {
//    module {
//        sourceDirs += file("src")
//        scopes = [ COMPILE: [plus:[project.configurations.compile]]]
//
//        iml {
//            withXml {
//                def node = it.asNode()
//                def builder = NodeBuilder.newInstance()
//                builder.current = node
//                builder.component(name: "FacetManager") {
//                    facet(type: "android", name: "Android") {
//                        configuration {
//                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
//                        }
//                    }
//                }
//            }
//        }
//    }
//}
